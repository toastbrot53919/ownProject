C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\AbilitysSkillsAndBuffsItems\Abilitys\LivingBombAbility.cs
LivingBombAbility class syntax tree:

LivingBombAbility
-DefaultAbility
--Ability
---ScriptableObject
+firstExplosionAbility: LivingBombFirstExplosion
+secondExplosionAbility: LivingBombSecondExplosion
+livingBombBuff: LivingBombBuff
+livingBombSecondBuff: LivingBombSecondBuff
+abilityObjectFirstExplostionPrefab: GameObject
+abilityObjectSecondExplostionPrefab: GameObject
-Awake()
--base.Awake()
--abilityName = "Living Bomb"
--abilityDescription = "This is a living bomb ability"
--BaseAbilityStats.cooldown = 10
--BaseAbilityStats.intelligenceScaling = 1
--livingBombBuff = CreateInstance<LivingBombBuff>()
--livingBombSecondBuff = CreateInstance<LivingBombSecondBuff>()
--firstExplosionAbility = CreateInstance<LivingBombFirstExplosion>()
---firstExplosionAbility.abilityObjectFirstExplostionPrefab = abilityObjectFirstExplostionPrefab
---firstExplosionAbility.secondBombBuff = livingBombSecondBuff
--secondExplosionAbility = CreateInstance<LivingBombSecondExplosion>()
---secondExplosionAbility.abilityObjectSecondExplostionPrefab = abilityObjectSecondExplostionPrefab
--livingBombBuff.firstExplosionAbility = firstExplosionAbility
--livingBombSecondBuff.secondExplosionAbility = secondExplosionAbility
-Activate(AbilityData abilityData)
--targetBuffSystem = abilityData.Target.GetComponent<BuffSystem>()
--casterBuffSystem = abilityData.CasterStats.GetComponent<BuffSystem>()
--if targetBuffSystem != null
---targetBuffSystem.AddBuff(livingBombBuff, abilityData.Target, casterBuffSystem)
-OnAbilityObjectHit(AbilityObject abilityObject, GameObject target)

LivingBombBuff class syntax tree:

LivingBombBuff
-Buff
+firstExplosionAbility: Ability
-InvokeOnFade(BuffInstance buffInstance, GameObject target)
--base.InvokeOnFade(buffInstance, target)
--abilityData = new AbilityData { CasterStats = buffInstance.target.GetComponent<CharacterStats>(), Target = buffInstance.target }
--firstExplosionAbility.Activate(abilityData)
+InvokeOnApply(BuffInstance buffInstance, GameObject target)

LivingBombFirstExplosion class syntax tree:

LivingBombFirstExplosion
-Ability
+abilityObjectFirstExplostionPrefab: GameObject
+secondBombBuff: Buff
+-casterBuffSystem: BuffSystem
-OnAbilityObjectHit(AbilityObject abilityObject, GameObject target)
--targetBuffSystem = target.GetComponent<BuffSystem>()
--casterBuffSystem = abilityObject.data.CasterStats.GetComponent<BuffSystem>()
--if targetBuffSystem != null
---targetBuffSystem.AddBuff(secondBombBuff, target, casterBuffSystem)
-Activate(AbilityData abilityData)
--abiltiyObject = GameObject.Instantiate(abilityObjectFirstExplostionPrefab, abilityData.Target.transform.position, Quaternion.identity).GetComponent<AbilityObject>()
--abiltiyObject.data = abilityData
--abiltiyObject.ParentAbility = this

LivingBombSecondBuff class syntax tree:

LivingBombSecondBuff
-Buff
+secondExplosionAbility: Ability
-InvokeOnFade(BuffInstance buffInstance, GameObject target)
--base.InvokeOnFade(buffInstance, target)
--abilityData = new AbilityData { CasterStats = buffInstance.target.GetComponent<CharacterStats>(), Target = buffInstance.target }
--secondExplosionAbility.Activate(abilityData)

LivingBombSecondExplosion class syntax tree:

LivingBombSecondExplosion
-Ability
+abilityObjectSecondExplostionPrefab: GameObject
-OnAbilityObjectHit(AbilityObject abilityObject, GameObject target)
--healthController = target.GetComponent<HealthController>()
--if healthController != null
---healthController.TakeDamage(abilityObject.data.damage, abilityObject.data.CasterStats.gameObject)
-Activate(AbilityData abilityData)
--abilityObject = Instantiate(abilityObjectSecondExplostionPrefab, abilityData.Target.transform.position, Quaternion.identity).GetComponent<AbilityObject>()
--abilityObject.data = abilityData
--abilityObject.ParentAbility = this