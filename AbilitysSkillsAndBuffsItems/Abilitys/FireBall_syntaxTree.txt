C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\AbilitysSkillsAndBuffsItems\Abilitys\FireBall.cs
Syntax Tree:

FireBall
- DefaultProjectileAbility
  - Ability (abstract)
    - ScriptableObject
      - Object
        - ValueType
- OnAbilityObjectHit (virtual method)
  - parameter abilityObject: AbilityObject
  - parameter target: GameObject
  - if (abilityObject.data.CasterStats != null)
    - targetHealth = target.GetComponent<HealthController>();
    - if (targetHealth != null)
      - damage = abilityObject.data.damage;
      - targetHealth.TakeDamage(damage, abilityObject.data.CasterStats.gameObject);
  - RaiseOnObjectHit(abilityObject, target)
- Activate (abstract method)
  - parameter abilityData: AbilityData
  - if (abilityData.CasterStats == null) return
  - firePoint = abilityData.CasterStats.GetComponent<AbilityController>().firePoint
  - projectileInstance = Instantiate(projectilePrefab, firePoint.position, firePoint.rotation)
  - abilityObject = projectileInstance.GetComponent<BaseProjectileObject>()
  - RaiseOnObjectSpawned(abilityObject, null)
  - rb = projectileInstance.GetComponent<Rigidbody>()
  - rb.velocity = firePoint.forward * abilityData.projectileSpeed
  - abilityObject.ParentAbility = this
  - abilityObject.data = abilityData

The FireBall class extends the DefaultProjectileAbility class, which in turn implements the Ability abstract class. The Ability class is a ScriptableObject that inherits from Object and therefore from ValueType.

The class has two methods, OnAbilityObjectHit and Activate, both of which override abstract methods defined in the parent classes.

In the OnAbilityObjectHit method, the abilityObject parameter is used to access the caster stats and damage values. If the target object has a HealthController component, its TakeDamage method is called with the damage and the caster's game object as parameters. Afterwards, the RaiseOnObjectHit event is triggered.

The Activate method is responsible for instantiating and configuring a projectile object. First, it checks if the caster stats are not null, returning early if they are. Then, it retrieves the fire point transform from the caster's AbilityController component. It instantiates a projectile prefab at that position and rotation, gets its BaseProjectileObject component, and sets the ParentAbility and data properties of the abilityObject. Finally, it retrieves the Rigidbody component and sets its velocity based on the fire point direction and the projectile speed. The RaiseOnObjectSpawned event is triggered with the abilityObject parameter.