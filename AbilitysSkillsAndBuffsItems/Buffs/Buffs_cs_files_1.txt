using System.Collections.Generic; using UnityEngine; public class Buff : ScriptableObject { public string buffName; public float duration; public bool stackable; public int maxStacks; private event System.Action<BuffInstance> OnApply; private event System.Action<BuffInstance> OnFade; private event System.Action<BuffInstance> OnHit; public void InvokeOnApply(BuffInstance buffInstance) { OnApply?.Invoke(buffInstance); } public void InvokeOnFade(BuffInstance buffInstance) { OnFade?.Invoke(buffInstance); } public void InvokeOnHit(BuffInstance buffInstance) { OnHit?.Invoke(buffInstance); } public List<string> GetEventTypes() { List<string> eventTypes = new List<string>(); if (OnApply != null) { eventTypes.Add("OnApply"); } if (OnFade != null) { eventTypes.Add("OnFade"); } if (OnHit != null) { eventTypes.Add("OnHit"); } return eventTypes; } }
﻿using UnityEngine; public class BuffInstance { public Buff buff; public GameObject target; public int currentStacks; public float remainingDuration; public BuffInstance(Buff buff, GameObject target, int initialStacks, float initialDuration) { this.buff = buff; this.target = target; this.currentStacks = initialStacks; this.remainingDuration = initialDuration; } public void Update() { remainingDuration -= Time.deltaTime; if (remainingDuration <= 0) { OnBuffFade(); return; } // Perform any other update logic specific to the buff } public void Refresh(float duration) { remainingDuration = duration; } public void AddStack() { currentStacks++; OnBuffApply(); } public void RemoveStack() { currentStacks--; if (currentStacks <= 0) { OnBuffFade(); } } public void OnBuffApply() { // Perform any actions or apply stat changes when the buff is applied } public void OnBuffFade() { // Perform any actions or revert stat changes when the buff fades } public void OnBuffHit() { // Perform any actions or apply effects when the buff "hits" (e.g., dealing damage or applying a debuff) } }
