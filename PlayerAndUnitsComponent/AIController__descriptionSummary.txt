C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\AIController.cs
The code is a C# script called AIController.cs located in the folder Assets\Scripts\PlayerAndUnitsComponent. It defines a class called AIController that inherits from the MonoBehaviour class and contains several public and private member variables. 

The public member variables include currentState, which represents the current state of the AI, and five different states (IdleState, FollowState, AssistState, PatrolState, and ChaseState), each of which inherits from an abstract class called AIState. 

Other public variables include target, aggroRadius, aggroTag, attackInterval, attackAbility, and attackRange, which are used for the AI's attack behavior. 

The AIController also has a private NavMeshAgent variable and an AnimationController component. 

The Start() method initializes the NavMeshAgent and sets the initial state to idle. It also obtains a reference to a PatrolStateMonoBehaviour component and populates the waypoints in the patrolState with the transforms contained in the component's waypoints list. 

The Update() method updates the current state and sets the animator's "Speed" parameter based on the NavMeshAgent's velocity. 

The ChangeState() method changes the current state to a new state. 

The checkForAggro() method detects any objects within a sphere with the specified aggroRadius and aggroTag, sets the target to the first object encountered, and changes state to ChaseState. 

The attack() method checks if the target is within attackRange, stops the NavMeshAgent, performs the attack ability, and changes state to ChaseState if the target is out of range. 

The SetAIController() method sets all of the AIController's variables to the same values as another AIController instance. 

Finally, the script defines an abstract class called AIState, which defines abstract methods for entering, updating, and exiting an AI state. C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\AIController.cs
The file C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\AIController.cs contains a C# script that defines the AIController class, which inherits from MonoBehaviour. The public member variables include currentState, which represents the current state of the AI, and five different states (IdleState, FollowState, AssistState, PatrolState, and ChaseState), each of which inherits from an abstract class called AIState. Other public variables include target, aggroRadius, aggroTag, attackInterval, attackAbility, and attackRange, which are used for the AI's attack behavior.

The Start() method initializes the NavMeshAgent and sets the initial state to IdleState. It also obtains a reference to a PatrolStateMonoBehaviour component and populates the waypoints in the PatrolState with the transforms contained in the component's waypoints list.

The Update() method updates the current state and sets the animator's "Speed" parameter based on the NavMeshAgent's velocity.

The ChangeState() method changes the current state to a new state.

The checkForAggro() method detects any objects within a sphere with the specified aggroRadius and aggroTag, sets the target to the first object encountered, and changes state to ChaseState.

The attack() method checks if the target is within attackRange, stops the NavMeshAgent, performs the attack ability, and changes state to ChaseState if the target is out of range.

The SetAIController() method sets all of the AIController's variables to the same values as another AIController instance.

Finally, the script defines an abstract class called AIState, which defines abstract methods for entering, updating, and exiting an AI state.