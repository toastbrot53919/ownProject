C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
The code is a script in Unity called "BuffSystem.cs" located in the path "C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\". It contains a class called "BuffSystem" that manages buffs applied to game objects. The class has public attributes, such as a dictionary of active buffs, a list of buffs to remove, and a modifier for total stats. The class also has several event dictionaries that are used as callbacks for when buffs are applied, faded, or hit by another BuffSystem. The Awake() method initializes the public attributes and event dictionaries. The Update() method loops through all active buffs to update their status and calls the RemoveBuffs() method to remove any expired buffs. The RemoveBuffs() method removes buffs from the ActiveBuffs dictionary and calls the OnBuffFade() method and removes the events related to the buff. The AddBuff() method adds a new buff or adds stacks to an existing buff if it is stackable. If the buff is new, it creates a new BuffInstance object and adds it to the ActiveBuffs dictionary. The RemoveBuff() method adds the buff to a list of buffsToRemove to be removed in the next call to RemoveBuffs(). The GetBuffInstance() method returns the BuffInstance object of the buff with the given name. C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
n<BuffInstance,GameObject> action in onBuffFromBuffSystemHitting[buffName])
                {
                    action(buffInstance,interactTarget);
                }
            }
        }
        else
        {
            Debug.LogError("Invalid eventType");
        }
    }

    public void AddBuff(string buffName,int stacks = 1,float duration = -1)
    {
        BuffInstance buffInstance;
        if (activeBuffs.ContainsKey(buffName))
        {
            buffInstance = activeBuffs[buffName];
            if (buffInstance.buff.stackable)
            {
                buffInstance.AddStacks(stacks);
            }
            else
            {
                buffInstance.StopBuff();
                buffInstance = new BuffInstance(buffDatabase.GetBuff(buffName),stacks,duration);
                activeBuffs[buffName] = buffInstance;
            }
        }
        else
        {
            buffInstance = new BuffInstance(buffDatabase.GetBuff(buffName),stacks,duration);
            activeBuffs.Add(buffName,buffInstance);
        }
        OnBuffFromBuffSystemApplying(buffInstance,gameObject);
    }


    public void RemoveBuff(string buffName)
    {
        if (activeBuffs.ContainsKey(buffName))
        {
            BuffInstance buffInstance = activeBuffs[buffName];
            activeBuffs.Remove(buffName);
            buffsToRemove.Add(buffInstance);
            OnBuffFade(buffInstance,gameObject);
            RemoveEventsForBuff(buffName);
        }
    }

    public void RemoveBuffs()
    {
        foreach (BuffInstance buffToRemove in buffsToRemove)
        {
            foreach (BuffModifier buffModifier in buffToRemove.buff.modifiers)
            {
                totalStats[buffModifier.statType].RemoveModifier(buffModifier);
            }
        }
        buffsToRemove.Clear();

        List<string> buffNamesToRemove = new List<string>();
        foreach (KeyValuePair<string,BuffInstance> pair in activeBuffs)
        {
            pair.Value.UpdateDuration(Time.deltaTime);
            if (pair.Value.IsBuffExpired())
            {
                OnBuffFade(pair.Value,gameObject);
                RemoveEventsForBuff(pair.Key);
                buffsToRemove.Add(pair.Value);
                buffNamesToRemove.Add(pair.Key);
            }
        }

        foreach (string buffName in buffNamesToRemove)
        {
            activeBuffs.Remove(buffName);
        }
    }

    void Awake()
    {
        activeBuffs = new Dictionary<string,BuffInstance>();
        buffsToRemove = new List<BuffInstance>();
        buffDatabase = Resources.Load<BuffDatabase>("BuffDatabase");
        totalStats = new Dictionary<StatType,StatModifierCollection>();
        foreach (StatType statType in System.Enum.GetValues(typeof(StatType)))
        {
            totalStats.Add(statType,new StatModifierCollection());
        }

        onBuffFromBuffSystemApplying = new Dictionary<string,List<Action<BuffInstance,GameObject>>>();
        onBuffFromBuffSystemHitting = new Dictionary<string,List<Action<BuffInstance,GameObject>>>();
        onBuffFromBuffSystemFading = new Dictionary<string,List<Action<BuffInstance,GameObject>>>();
    }

    void Update()
    {
        RemoveBuffs();

        foreach (KeyValuePair<string,BuffInstance> pair in activeBuffs)
        {
            BuffInstance buffInstance = pair.Value;

            foreach (BuffModifier buffModifier in buffInstance.buff.modifiers)
            {
                totalStats[buffModifier.statType].AddModifier(buffModifier);
            }
        }
    }   

} 

The code file "BuffSystem.cs" manages buffs applied to game objects in Unity. The script contains a class called "BuffSystem" that has public attributes, including a dictionary of active buffs, a list of buffs to remove, and a modifier for total stats. The class also has several event dictionaries that are used as callbacks for when buffs are applied, faded, or hit by another BuffSystem. The script includes methods to add and remove events for buffs and call events from buffs. 

The script's AddBuff() method adds a new buff or adds stacks to an existing buff if it is stackable. If the buff is new, it creates a new BuffInstance object and adds it to the ActiveBuffs dictionary. The RemoveBuff() method adds the buff to a list of buffsToRemove to be removed in the next call to RemoveBuffs(). 

The script also includes the RemoveBuffs() method, which removes buffs from the ActiveBuffs dictionary and calls the OnBuffFade() method and removes the events related to the buff. The Update() method loops through all active buffs to update their status and calls the RemoveBuffs() method to remove any expired buffs. 

The script's Awake() method initializes the public attributes, including the activeBuffs dictionary, buffsToRemove list, and event dictionaries. The Update() method also updates the total stats attribute by adding the modifier of each buff to its corresponding StatType. C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
The "BuffSystem.cs" file manages buffs applied to game objects in Unity. It contains a class called "BuffSystem" with public attributes, including a dictionary of active buffs, a list of buffs to remove, and a modifier for total stats. The class also has several event dictionaries that act as callbacks when buffs are applied, faded, or hit by another BuffSystem. 

The AddBuff() method adds a new buff if it's not already active or stacks to an existing buff if it's stackable. If the buff is new, it creates a new BuffInstance object and adds it to the ActiveBuffs dictionary. The RemoveBuff() method adds the buff to a list of buffsToRemove to be removed later by the RemoveBuffs() method. 

The RemoveBuffs() method removes buffs from the ActiveBuffs dictionary, calls the OnBuffFade() method, and removes any events related to the buff. The Update() method loops through all active buffs to update their status and calls the RemoveBuffs() method to remove any expired buffs. 

The Awake() method initializes public attributes, including the activeBuffs dictionary, buffsToRemove list, and event dictionaries. The Update() method updates the total stats attribute by adding the modifier of each buff to its corresponding StatType. 

If the eventType is invalid, the PlayBuffEvent() method outputs an error message. The code also includes various private methods, including one to remove events related to a specific buff.