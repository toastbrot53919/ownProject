C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
uffSystemHitting[buffName])
                {
                    action(buffInstance,interactTarget);
                }
            }
        }
        else
        {
            Debug.LogError("Invalid eventType");
        }
    }

    public void AddEventForThisBuff(string buffName, string eventType, Action<BuffInstance> eventCallback)
    {
        if (eventCallback == null)
        {
            Debug.LogError("eventCallback is null");
            return;
        }

        if (eventType == "OnApply")
        {
            if (!onBuffApplyingOnThisBuffSystem.ContainsKey(buffName))
            {
                onBuffApplyingOnThisBuffSystem[buffName] = new List<Action<BuffInstance>>();
            }
            onBuffApplyingOnThisBuffSystem[buffName].Add(eventCallback);
        }
        else if (eventType == "OnFade")
        {
            if (!onBuffFadingOnThisBuffSystem.ContainsKey(buffName))
            {
                onBuffFadingOnThisBuffSystem[buffName] = new List<Action<BuffInstance>>();
            }
            onBuffFadingOnThisBuffSystem[buffName].Add(eventCallback);
        }
        else if (eventType == "OnHit")
        {
            if (!onBuffHittingThisBuffSystem.ContainsKey(buffName))
            {
                onBuffHittingThisBuffSystem[buffName] = new List<Action<BuffInstance>>();
            }
            onBuffHittingThisBuffSystem[buffName].Add(eventCallback);
        }
        else
        {
            Debug.LogError("Invalid eventType");
        }
    }

    public void RemoveEventForThisBuff(string buffName, string eventType, Action<BuffInstance> eventCallback)
    {
        if (eventType == "OnApply")
        {
            if (onBuffApplyingOnThisBuffSystem.ContainsKey(buffName))
            {
                onBuffApplyingOnThisBuffSystem[buffName].Remove(eventCallback);
            }
        }
        else if (eventType == "OnFade")
        {
            if (onBuffFadingOnThisBuffSystem.ContainsKey(buffName))
            {
                onBuffFadingOnThisBuffSystem[buffName].Remove(eventCallback);
            }
        }
        else if (eventType == "OnHit")
        {
            if (onBuffHittingThisBuffSystem.ContainsKey(buffName))
            {
                onBuffHittingThisBuffSystem[buffName].Remove(eventCallback);
            }
        }
        else
        {
            Debug.LogError("Invalid eventType");
        }
    }
} 

Syntax tree diagram: 

 BuffSystem.cs 
├── public Dictionary<string, BuffInstance> activeBuffs
├── public List<string> buffsToRemove
├── public StatsModifier TotalstatsModifier
├── public Dictionary<string, List<Action<BuffInstance,GameObject>>> onBuffFromBuffSystemApplying
├── public Dictionary<string, List<Action<BuffInstance,GameObject>>> onBuffFromBuffSystemFading
├── public Dictionary<string, List<Action<BuffInstance,GameObject>>> onBuffFromBuffSystemHitting
├── public Dictionary<string, List<Action<BuffInstance>>> onBuffApplyingOnThisBuffSystem
├── public Dictionary<string, List<Action<BuffInstance>>> onBuffFadingOnThisBuffSystem
├── public Dictionary<string, List<Action<BuffInstance>>> onBuffHittingThisBuffSystem
├── private void Awake()
│   ├── buffsToRemove = new List<string>()
│   ├── activeBuffs = new Dictionary<string, BuffInstance>()
│   ├── onBuffFromBuffSystemApplying = new Dictionary<string, List<Action<BuffInstance,GameObject>>>()
│   ├── onBuffFromBuffSystemFading = new Dictionary<string, List<Action<BuffInstance,GameObject>>>()
│   └── onBuffFromBuffSystemHitting = new Dictionary<string, List<Action<BuffInstance,GameObject>>>()
├── private void Update()
│   ├── foreach (BuffInstance buffInstance in activeBuffs.Values)
│   │   └── buffInstance.Update()
│   └── RemoveBuffs()
├── private void RemoveBuffs()
│   ├── foreach (string buffName in buffsToRemove)
│   │   ├── if (!activeBuffs.ContainsKey(buffName))
│   │   ├── BuffInstance buffInstance = activeBuffs[buffName]
│   │   ├── activeBuffs.Remove(buffName)
│   │   ├── CallEventFromBuff(buffName,"OnFade",buffInstance,null)
│   │   ├── buffInstance.OnBuffFade()
│   │   └── RemoveEventsForBuff(buffName)
│   └── buffsToRemove.Clear()
├── public void AddBuff(Buff buff, GameObject target,BuffSystem caster)
│   ├── if (buff == null)
│   ├── if (activeBuffs.ContainsKey(buff.buffName))
│   │   ├── BuffInstance existingBuff = activeBuffs[buff.buffName]
│   │   ├── if (buff.stackable && existingBuff.currentStacks < buff.maxStacks)
│   │   │   ├── existingBuff.AddStack()
│   │   │   ├── existingBuff.Refresh(buff.duration)
│   │   │   └── existingBuff.OnBuffApply()
│   │   ├── else
│   │   │   ├── existingBuff.Refresh(buff.duration)
│   │   │   ├── existingBuff.OnBuffApply()
│   │   │   └── CallEventFromBuff(buff.buffName,"OnApply",existingBuff,target)
│   ├── else
│   │   ├── BuffInstance newBuff = new BuffInstance(buff, target,gameObject, 1, buff.duration)
│   │   │   └── newBuff.buffSystemCaster = caster
│   │   └── activeBuffs.Add(buff.buffName, newBuff)
│   │       └── newBuff.OnBuffApply()
├── public void RemoveBuff(Buff buff,BuffSystem caster)
├── public BuffInstance GetBuffInstance(string buffName)
├── public Buff GetBuff(string buffName)
├── public void AddEventForBuff(string buffName, string eventType, Action<BuffInstance,GameObject> eventCallback)
├── public void RemoveEventForBuff(string buffName, string eventType, Action<BuffInstance,GameObject> eventCallback)
├── public void RemoveEventsForBuff(string buffName)
├── public void CallEventFromBuff(string buffName, string eventType, BuffInstance buffInstance,GameObject interactTarget)
├── public void AddEventForThisBuff(string buffName, string eventType, Action<BuffInstance> eventCallback)
└── public void RemoveEventForThisBuff(string buffName, string eventType, Action<BuffInstance> eventCallback) C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
Sorry, it seems like the code you provided is incomplete and has errors. There is a line of code that is cut off and ends in the middle of a word. Can you please provide the complete and error-free code so that I can generate the syntax tree for each class? Thank you.