AbilityController.cs: A script for handling abilities for players and units in Unity, with a firePoint transform and a list of learned abilities. Includes a public function for activating specific abilities.

AIController.cs: A class representing the AI controller for NPCs in a game, with public fields for different AI states and private fields for specific variables. Includes methods for checking for player proximity, changing states, and executing attacks.

AnimationController.cs: A script for controlling animations and visual effects for players and units in Unity, with an Animator component and a list of VisualEffectData objects. Includes methods for playing animations and applying visual effects.

BuffSystem.cs manages buffs in the game using dictionaries to keep track of active buffs and their associated events. ButtonWithToolTip.cs is a script used in the player and units component that contains public and private variables as well as methods for showing and hiding tooltips, and unlocking skill nodes. CharacterCombatController.cs controls combat actions for characters, calculating damage based on attributes and executing abilities on targets, and returns the character's stats.

The "CharacterStats.cs" file in a Unity game manages the main and sub-stats of a character, updates sub-stats based on changes to main stats, allows for the addition of stat points, and tracks unspent stat points. The "EquipManager.cs" file manages equipment items, tracks equipped items of each type, and updates total stats based on equipped items. It allows for easy equipping and unequipping of items and updating of total stats.

ExperienceSystem.cs:
- Implements a system for tracking and leveling up player experience in a game
- Public properties: "CurrentXP," "Level," and "XpToNextLevel"
- Public events: "LevelUpEvent" and "ExperienceGained"
- Constructor initializes "CurrentXP," "Level," and "XpToNextLevel"
- "AddExperience(int amount)" method allows for adding experience to player's total
- "UpdateXpToNextLevel()" method sets the value of "XpToNextLevel"
- "CalculateXpForLevel(int level)" method calculates experience needed for a certain level

HealthController.cs:
- Controls the health of an object in the game
- Variables include Name, maxHealth, currentHealth, damageTextPrefab, and questSystem
- "Start" function sets currentHealth to maxHealth and finds damageTextPrefab
- "TakeDamage" function reduces the currentHealth by the damage value and updates quest objective if necessary
- "Die" function implements behavior for object death and destroys the game object
- "ShowDamageNumbers" function spawns damage number text on the screen

HotkeyController.cs:
- Handles hotkeys for a player and units
- List of hotkeys, combat controller, and dictionary that maps hotkeys to abilities
- "Start" function initializes hotkeys and assigns test ability to the first hotkey
- "Update" function calls "HandleHotkey" function to check for key presses and perform corresponding ability
- "Hotkey" class defines a hotkey object that contains an ability

The "IInteractable.cs" interface requires implementing classes to have an "Interact()" method. "Inventory.cs" manages an inventory of items and updates quest objectives. "isStunnableController.cs" controls stunnable behavior of game objects through a "Stun" function and three properties.

IStunnable.cs is an interface that defines properties and methods related to stuns in Unity projects. It includes a stunned bool property, timeAtStunStart and stunDuration float properties, a Stun method that stuns the object for a given duration, and an isStunned method that returns whether the object is currently stunned. MovementController.cs controls the movement of players and units using a NavMeshAgent component by targeting a given position. It initializes both NavMeshAgent and IStunnable components in the Start() function and stops movement if the unit is stunned.

The PlayerController class controls character movement, camera, jumping, and hotkeys for abilities and items. It manages buffs, experience points, character stats, combat, skills, skill tree, and character stun status. It contains public variables for movement speed, rotation speed, jump force, and ground detection. It also uses Animator and Rigidbody components. The SkillController class manages skills, skill tree, available skill points, and character stats. It has methods for learning and unlearning skills and events for skill changes. It allows the player to manage their character's skills and progress through the game's skill tree.

Summary:

1. TargetingSystem.cs: This class provides functionality for selecting targets using the player camera and crosshair and contains public and private variables and methods for handling targeting.

2. AssistState.cs: This script is for an AI state that assists the player. It contains public variables for the target transform, assist ability, and assist range. The EnterState, UpdateState, and ExitState methods are overriden.

3. AttackState.cs: This scriptable object class defines the AI behavior when the unit is in the attack state. It contains a Transform variable for the target, an Ability variable for the attack method, and public variables for attack range, attack interval, and next attack time. The EnterState initializes the next attack time, UpdateState calls the attack method of the AIController, and ExitState cleans up any variables.

ChaseState.cs is a script for AI entities to chase a target, with adjustable chase speed and stopping distance. FollowState.cs implements a state for AI units to follow a target at a defined distance. IdleState.cs represents the idle behavior of AI-controlled characters with an idle duration and time, transitioning to patrol state after fhat time has elapsed.

The PatrolState.cs script defines a patrol state for an AI controller in a game. It has a list of waypoints, patrol speed, and wait time between each waypoint. The script sets the unit's NavMeshAgent speed during the EnterState function, and in the UpdateState function, the unit checks for any aggro and moves between waypoints in the list. The ExitState function can be used for cleaning up or resetting variables.