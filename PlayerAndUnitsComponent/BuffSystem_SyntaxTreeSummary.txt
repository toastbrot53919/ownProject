C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\BuffSystem.cs
BuffSystem

- private Dictionary<string, BuffInstance> activeBuffs
- private Dictionary<string, System.Action<BuffInstance>> eventHandlers

+ Awake()
    - activeBuffs = new Dictionary<string, BuffInstance>()
    - eventHandlers = new Dictionary<string, System.Action<BuffInstance>>()

+ AddBuff(Buff buff, GameObject target)
    ? activeBuffs.ContainsKey(buff.buffName)
        + existingBuff = activeBuffs[buff.buffName]
        ? buff.stackable && existingBuff.currentStacks < buff.maxStacks
            - existingBuff.AddStack()
            - existingBuff.Refresh(buff.duration)
        : - existingBuff.Refresh(buff.duration)
    : + newBuff = new BuffInstance(buff, target, 1, buff.duration)
        - activeBuffs.Add(buff.buffName, newBuff)
        + AddEventHandlers(buff)
        - newBuff.OnBuffApply()

+ RemoveBuff(Buff buff)
    ? activeBuffs.ContainsKey(buff.buffName)
        + existingBuff = activeBuffs[buff.buffName]
        - existingBuff.RemoveStack()
        ? existingBuff.currentStacks <= 0
            - RemoveEventHandlers(buff)
            - activeBuffs.Remove(buff.buffName)

+ GetBuffInstance(string buffName)
    ? activeBuffs.ContainsKey(buffName)
        - return activeBuffs[buffName]
    - return null

- AddEventHandlers(Buff buff)
    + eventTypes = buff.GetEventTypes()
    . foreach(string eventType in eventTypes)
        ? !eventHandlers.ContainsKey(eventType)
            - eventHandlers.Add(eventType, (BuffInstance buffInstance) => {})
        - eventHandler = null
        ? eventType == "OnApply"
            - eventHandler = buff.InvokeOnApply
        ? eventType == "OnFade"
            - eventHandler = buff.InvokeOnFade
        ? eventType == "OnHit"
            - eventHandler = buff.InvokeOnHit
        ? eventHandler != null
            - eventHandlers[eventType] += eventHandler

- RemoveEventHandlers(Buff buff)
    + eventTypes = buff.GetEventTypes()
    . foreach(string eventType in eventTypes)
        - eventHandler = null
        ? eventType == "OnApply"
            - eventHandler = buff.InvokeOnApply
        ? eventType == "OnFade"
            - eventHandler = buff.InvokeOnFade
        ? eventType == "OnHit"
            - eventHandler = buff.InvokeOnHit
        ? eventHandler != null
            - eventHandlers[eventType] -= eventHandler

+ CallEventHandlers(string eventType, BuffInstance buffInstance)
    ? eventHandlers.ContainsKey(eventType)
        - eventHandlers[eventType]?.Invoke(buffInstance)