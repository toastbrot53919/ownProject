using UnityEngine; [CreateAssetMenu(menuName = "AI/States/AssistState")] public class AssistState : AIState { public Transform target; public Ability assistAbility; public float assistRange = 10f; public override void EnterState(AIController aiController) { } public override void UpdateState(AIController aiController) { float distanceToTarget = Vector3.Distance(aiController.transform.position, target.position); if (distanceToTarget <= assistRange) { // aiController.GetComponent<AbilityController>().UseAbility(assistAbility); } else { aiController.ChangeState(aiController.followState); } } public override void ExitState(AIController aiController) { } }
﻿using UnityEngine; [CreateAssetMenu(menuName = "AI/States/AttackState")] public class AttackState : AIState { public Transform target; public Ability attackAbility; public float attackRange = 5f; public float attackInterval = 1f; private float nextAttackTime; public override void EnterState(AIController aiController) { nextAttackTime = Time.time; } public override void UpdateState(AIController aiController) { if (target != null) { float distanceToTarget = Vector3.Distance(aiController.transform.position, target.position); if (distanceToTarget <= attackRange) { if (Time.time >= nextAttackTime) { // Use attack ability aiController.GetComponent<CharacterCombatController>().PerformAbility(attackAbility, target.gameObject); nextAttackTime = Time.time + attackInterval; } } else { // Transition to another state if needed, for example, Chase aiController.ChangeState(aiController.chaseState); } } } public override void ExitState(AIController aiController) { // Clean up or reset any variables if needed } }
﻿using UnityEngine; [CreateAssetMenu(menuName = "AI/States/ChaseState")] public class ChaseState : AIState { public float chaseSpeed = 6f; public float stoppingDistance = 2f; public override void EnterState(AIController aiController) { aiController.GetComponent<UnityEngine.AI.NavMeshAgent>().speed = chaseSpeed; } public override void UpdateState(AIController aiController) { Transform target = aiController.target; if (target != null) { float distanceToTarget = Vector3.Distance(aiController.transform.position, target.position); if (distanceToTarget > stoppingDistance) { aiController.GetComponent<UnityEngine.AI.NavMeshAgent>().SetDestination(target.position); } else { // Transition to another state if needed, for example, Attack aiController.ChangeState(aiController.attackState); } } } public override void ExitState(AIController aiController) { // Clean up or reset any variables if needed } }
﻿using UnityEngine; [CreateAssetMenu(menuName = "AI/States/FollowState")] public class FollowState : AIState { public Transform target; public float stoppingDistance = 2f; public override void EnterState(AIController aiController) { } public override void UpdateState(AIController aiController) { float distanceToTarget = Vector3.Distance(aiController.transform.position, target.position); if (distanceToTarget > stoppingDistance) { aiController.GetComponent<UnityEngine.AI.NavMeshAgent>().SetDestination(target.position); } else { aiController.GetComponent<UnityEngine.AI.NavMeshAgent>().ResetPath(); } } public override void ExitState(AIController aiController) { } }
﻿using UnityEngine; [CreateAssetMenu(menuName = "AI/States/IdleState")] public class IdleState : AIState { public float idleDuration = 3f; private float idleTime; public override void EnterState(AIController aiController) { idleTime = Time.time + idleDuration; } public override void UpdateState(AIController aiController) { if (Time.time > idleTime) { aiController.ChangeState(aiController.patrolState); } } public override void ExitState(AIController aiController) { } }
﻿using System.Collections.Generic; using UnityEngine; [CreateAssetMenu(menuName = "AI/States/PatrolState")] public class PatrolState : AIState { public List<Transform> waypoints; public float patrolSpeed = 3f; public float waitTime = 3f; private int currentWaypoint; private float waitEndTime; public override void EnterState(AIController aiController) { aiController.GetComponent<UnityEngine.AI.NavMeshAgent>().speed = patrolSpeed; currentWaypoint = 0; } public override void UpdateState(AIController aiController) { UnityEngine.AI.NavMeshAgent agent = aiController.GetComponent<UnityEngine.AI.NavMeshAgent>(); if (waypoints.Count > 0) { if (!agent.pathPending && agent.remainingDistance < 0.5f) { if (Time.time > waitEndTime) { currentWaypoint = (currentWaypoint + 1) % waypoints.Count; agent.SetDestination(waypoints[currentWaypoint].position); waitEndTime = Time.time + waitTime; } } } } public override void ExitState(AIController aiController) { // Clean up or reset any variables if needed } }
﻿using UnityEngine; public class PatrolStateMonoBehaviour : MonoBehaviour { public GameObject[] waypoints; }
