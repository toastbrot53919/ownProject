C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\PlayerAndUnitsComponent\PlayerController.cs
PlayerController:
- buffSystem
- experienceSystem
- characterStats
- combatController
- skillController
- skillTree
- stunnable
- hotkeyController
- canGrabController
- targetingSystem
- Ability1
- moveSpeed
- rotationSpeed
- jumpForce
- groundLayer
- cameraTarget
- cameraDistance
- cameraHeight
- cameraRotationSpeed
- rb
- animator
- moveDirection
- isGrounded
- mainCamera
- cameraRotationY

Start():
- canGrabController = GetComponent(CanGrabController)
- combatController = GetComponent(CharacterCombatController)
- characterStats = GetComponent(CharacterStats)
- skillController = GetComponent(SkillController)
- targetingSystem = GetComponent(TargetingSystem)
- skillController.skillTree.resetAllNodes()
- rb = GetComponent(Rigidbody)
- animator = GetComponent(Animator)
- mainCamera = Camera.main.transform
- Cursor.lockState = CursorLockMode.Locked
- Cursor.visible = false
- skillController.OnSkillUnlocked += UpdateToSkillEvents
- stunnable = GetComponent(IStunnable)

Update():
- HandleMovement()
- HandleJump()
- HandleCamera()
- HandleActions()

UpdateToSkillEvents(SkillNode node):
- characterStats.UpdateSubStats()

HandleActions():
- target = targetingSystem.GetTarget()
- if target == null, return
- if target.GetComponent(IInteractable) != null:
  - if Vector3.Distance(target.transform.position,transform.position) < 10f:
    - target.GetComponent(IInteractable).Interact(transform)

HandleMovement():
- if stunnable != null and stunnable.isStunned(), return
- horizontal = Input.GetAxis("Horizontal")
- vertical = Input.GetAxis("Vertical")
- moveDirection = mainCamera.forward * vertical + mainCamera.right * horizontal
- moveDirection.y = 0f
- moveDirection.Normalize()
- if moveDirection != Vector3.zero:
  - targetRotation = Quaternion.LookRotation(moveDirection)
  - transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime)
- animator.SetFloat("Speed", moveDirection.magnitude)
- rb.MovePosition(rb.position + moveDirection * moveSpeed * Time.deltaTime)

HandleJump():
- if stunnable != null and stunnable.isStunned(), return
- isGrounded = Physics.Raycast(transform.position, Vector3.down, 0.4f, groundLayer)
- if Input.GetButtonDown("Jump") and isGrounded:
  - rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse)

HandleCamera():
- mouseX = Input.GetAxis("Mouse X")
- mouseY = Input.GetAxis("Mouse Y")
- cameraRotationY -= mouseY * cameraRotationSpeed
- cameraRotationY = Mathf.Clamp(cameraRotationY, -80f, 80f)
- mainCamera.RotateAround(cameraTarget.position, Vector3.up, mouseX * cameraRotationSpeed)
- mainCamera.localRotation = Quaternion.Euler(cameraRotationY, mainCamera.localEulerAngles.y, 0f)
- cameraOffset = new Vector3(0f, cameraHeight, -cameraDistance)
- targetPosition = cameraTarget.position + mainCamera.TransformDirection(cameraOffset)
- mainCamera.position = Vector3.Lerp(mainCamera.position, targetPosition, Time.deltaTime * rotationSpeed)
- mainCamera.LookAt(cameraTarget)

faceIndirectionOfCamera():
- transform.rotation = Quaternion.Euler(0f, mainCamera.localEulerAngles.y, 0f)

TryUnlockSkillNode(SkillNode skillNode):
- if skillNode == null, Debug.LogWarning("Invalid skill node."), return false
- if skillNode.isUnlocked, Debug.LogWarning("Already learned."), return false
- if skillController.availableSkillPoints < skillNode.skillPointCost, Debug.LogWarning("Not enough skill points."), return false
- statRequirementsMet = true
- for i = 0 to skillNode.mainStatRequirement.Count:
  - statName = skillNode.mainStatRequirement[i]
  - requiredValue = skillNode.mainStatValue[i]
  - if statName == Archetype.Strength:
    - if characterStats.strength < requiredValue, statRequirementsMet = false
  - elif statName == Archetype.Intelligence:
    - if characterStats.intelligence < requiredValue, statRequirementsMet = false
  - elif statName == Archetype.Dexterity:
    - if characterStats.dexterity < requiredValue, statRequirementsMet = false
  - elif statName == Archetype.Endurance:
    - if characterStats.endurance < requiredValue, statRequirementsMet = false
  - elif statName == Archetype.Wisdom:
    - if characterStats.wisdom < requiredValue, statRequirementsMet = false
  - else:
    - Debug.LogWarning("Invalid stat name in the skill node.")
- if not statRequirementsMet, Debug.LogWarning("Main stat requirement not met."), return false
- if skillNode.prerequisiteSkill != null and not skillNode.prerequisiteSkill.isUnlocked, Debug.LogWarning("Prerequisite skill not unlocked."), return false
- if not skillController.skillTree.IsVisible(skillNode), Debug.LogWarning("Skill node is not visible."), return false
- skillNode.isUnlocked = true
- skillController.LearnSkill(skillNode)
- return true

TryUnLearnSkillNode(SkillNode skillNode):
- if not skillNode.isUnlocked, return false
- skillNode.isUnlocked = false
- skillController.UnlearnSkill(skillNode)
- return true