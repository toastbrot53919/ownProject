using UnityEngine.Events; [System.Serializable] public class GameEvent : UnityEvent<string> { }
using UnityEngine; using System.Collections.Generic; [CreateAssetMenu(fileName = "Quest", menuName = "ScriptableObjects/Quest", order = 1)] public class Quest : ScriptableObject { public int id; public string title; public string description; public List<QuestObjective> objectives; public List<Reward> rewards; public QuestStatus status; public Quest(int id, string title, string description) { this.id = id; this.title = title; this.description = description; this.objectives = new List<QuestObjective>(); this.rewards = new List<Reward>(); this.status = QuestStatus.NotStarted; } public void AddObjective(QuestObjective objective) { objectives.Add(objective); } public void AddReward(Reward reward) { rewards.Add(reward); } // The missing CheckAndUpdateObjectives method public void CheckAndUpdateObjectives(string objectiveId) { foreach (QuestObjective objective in objectives) { if ( objective.status == ObjectiveStatus.Incomplete) { objective.UpdateProgress(objectiveId); if (objective.status == ObjectiveStatus.Completed) { CheckQuestCompletion(); } break; } } } private void CheckQuestCompletion() { bool allObjectivesComplete = true; foreach (QuestObjective objective in objectives) { if (objective.status != ObjectiveStatus.Completed) { allObjectivesComplete = false; break; } } if (allObjectivesComplete) { status = QuestStatus.Completed; } } } public enum QuestStatus { NotStarted, InProgress, Completed }
using UnityEngine; [CreateAssetMenu(fileName = "QuestAction", menuName = "QuestSystem/QuestAction", order = 1)] public class QuestAction : ScriptableObject { public string actionId; }
public abstract class QuestObjective { public string id; public string description; public ObjectiveStatus status; public abstract bool IsCompleted(); public abstract void UpdateProgress(string infoId); } public enum ObjectiveStatus { Completed,Incomplete }; public class KillObjective : QuestObjective { public string enemyId; public int targetKills; public int currentKills; public KillObjective(string id, string description, string enemyId, int targetKills) { this.id = id; this.description = description; this.enemyId = enemyId; this.targetKills = targetKills; this.currentKills = 0; this.status = ObjectiveStatus.Incomplete; } public override void UpdateProgress(string killedEnemyId) { if (killedEnemyId == "kill:"+enemyId && status != ObjectiveStatus.Completed) { currentKills++; if (currentKills >= targetKills) { status = ObjectiveStatus.Completed; } } } public override bool IsCompleted() { return status == ObjectiveStatus.Completed; } } public class GatherObjective : QuestObjective { public string itemId; public int targetItems; public int currentItems; public GatherObjective(string id, string description, string itemId, int targetItems) { this.id = id; this.description = description; this.itemId = itemId; this.targetItems = targetItems; this.currentItems = 0; this.status = ObjectiveStatus.Incomplete; } public override void UpdateProgress(string gatheredItemId) { if (gatheredItemId == "gather:"+itemId && status != ObjectiveStatus.Completed) { currentItems++; if (currentItems >= targetItems) { status = ObjectiveStatus.Completed; } } } public override bool IsCompleted() { return status == ObjectiveStatus.Completed; } } public class InspectObjective : QuestObjective { public string locationId; public bool locationInspected; public InspectObjective(string id, string description, string locationId) { this.id = id; this.description = description; this.locationId = locationId; this.locationInspected = false; this.status = ObjectiveStatus.Incomplete; } public override void UpdateProgress(string inspectedLocationId) { if (inspectedLocationId == "visit:"+locationId && !locationInspected) { locationInspected = true; status = ObjectiveStatus.Completed; } } public override bool IsCompleted() { return locationInspected; } } public class ActivateObjective : QuestObjective { public string altarId; public bool altarActivated; public ActivateObjective(string id, string description, string altarId) { this.id = id; this.description = description; this.altarId = altarId; this.altarActivated = false; this.status = ObjectiveStatus.Incomplete; } public override void UpdateProgress(string activatedAltarId) { if (activatedAltarId == "activate:"+altarId && !altarActivated) { altarActivated = true; status = ObjectiveStatus.Completed; } } public override bool IsCompleted() { return altarActivated; } }
using UnityEngine; using System.Collections.Generic; public class QuestSystem : MonoBehaviour { public List<Quest> quests; private void Start() { quests = new List<Quest>(); } public void AddQuest(Quest quest) { quests.Add(quest); } public void RemoveQuest(int questId) { Quest questToRemove = quests.Find(q => q.id == questId); if (questToRemove != null) { quests.Remove(questToRemove); } } public void UpdateQuestObjective(string objectiveId) { foreach (Quest quest in quests) { if (quest.status != QuestStatus.Completed) { quest.CheckAndUpdateObjectives(objectiveId); } } } }
using UnityEngine; [System.Serializable] public class Reward { public string rewardId; public string rewardName; public int quantity; public Reward(string rewardId, string rewardName, int quantity) { this.rewardId = rewardId; this.rewardName = rewardName; this.quantity = quantity; } }
