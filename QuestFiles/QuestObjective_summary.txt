File Name: QuestObjective.cs

This file defines an abstract class QuestObjective with certain properties and methods. It has a string id and description associated with the objective, an ObjectiveStatus which is an enum consisting of Completed and Incomplete values. QuestObjective is an abstract class and has two abstract methods which are IsCompleted and UpdateProgress.

KillObjective: It is a class that inherits from QuestObjective class and has additional properties such as enemyId, targetKills, and currentKills. It has a constructor that takes in the id, description, enemyId and targetKills as parameters and initializes currentKills and status to zero and Incomplete respectively. UpdateProgress method increments currentKills when a specific enemy is killed and sets status to Completed when the required number of kills is achieved. GetObjectiveProgress returns the current kill to target kill ratio. IsCompleted method checks if status is Completed or not.

GatherObjective: It is also a class that inherits from QuestObjective, similar to the KillObjective class. This class has properties such as itemId, targetItems and currentItems. It has a constructor that takes in id, description, itemId and targetItems. CurrentItems and Status are initialized to zero and Incomplete respectively. UpdateProgress method increments currentItems when the player picks up a specific item and changes status to Completed when the required number of items are gathered. GetObjectiveProgress returns current item count to target item count ratio. IsCompleted method checks if status is Completed or not.

InspectObjective: This class inherits from the QuestObjective class and has properties such as locationId and locationInspected. It has a constructor that takes in id, description, and locationId. LocationInspected and Status are initialized to false and Incomplete, respectively. UpdateProgress method sets locationInspected to true when the player visits a specific location and sets Status to Completed. GetObjectiveProgress returns whether the location is inspected or not and IsCompleted checks whether the location is inspected or not.

ActivateObjective: This class also inherits from QuestObjective similar to the above classes and has properties such as altarId and altarActivated. It has a constructor that takes in id, description and altarId as parameters. AltarActivated and Status is initialized to false and Incomplete. UpdateProgress method sets altarActivated to true when the player uses a specific item or else when the player approaches the specific altar and sets status to Completed. GetObjectiveProgress returns whether the specific altar is activated or not and IsCompleted method checks whether the altar is activated or not.