Class Name: CharacterStatsUI.cs - Implements UI for displaying and updating character stats, uses Unity's UI system, displays current stats and unspent stat points, has public variables for UI elements and reference to CharacterStats component, initializes UI and updates it when stats change.

Class Name: CharacterUi.cs - Updates UI elements for displaying character stats and allows user interaction with game interface, has references to UI elements like Text, Image, and Button, as well as CharacterStats and UIManager classes, initializes UI and updates it when stats change.

The DamageNumberController class displays damage numbers in a game and has fields for text, float speed, and duration. It updates the number's position, rotation, and fade effect and destroys the game object after the duration. The GameManager class manages the game state and provides methods for changing the state and saving/loading the game. OutlineHighlight allows for highlighting outlines of a specific object with a particular color and utilizes a Camera object, CommandBuffer, and RenderTexture for its effect.

OverlayUiController.cs manages the overlay UI elements by linking public fields to respective UI elements, setting maximum values of health and mana bars, and updating the character's stats. PresentQuestUiController.cs controls the UI for presenting a quest, setting up listeners for accept and decline buttons. QuestBookUIController.cs controls the UI for the player's quest book, updating the quest list content and displaying quest details such as title, description, and objectives.

Class Name: QuestLogUIController.cs

Summary: This class manages the Quest Log User Interface, updating the display of a player's current quests and tracking quests with public and private variables holding text objects and a reference to the QuestSystem class. It includes functions to update the display, add or remove quests from tracking.

Components/Variables: 
- public TMP_Text questLogText: Displays the player's quest log.
- public TMP_Text trackingText: Displays the player's currently tracking quests.
- private QuestSystem questSystem: Reference to the QuestSystem class.
- private List<Quest> trackingQuests: Holds the player's currently tracking quests.

Functions:
- Awake(): Sets the questSystem variable by finding the QuestSystem object in the scene. Logs an error message if not found.
- Start(): Updates the quest log display.
- UpdateQuestLog(): Updates the display of the quest log and tracking quests, looping through all quests and currently tracking quests and updating text objects with the final strings.
- AddQuestToTrack(int questID): Adds a quest to the list of currently tracking quests, updating the quest log display.
- RemoveQuestToTrack(int questID): Removes a quest from the list of currently tracking quests, updating the quest log display.

Class Name: SkillTreeMenuController.cs

Summary: This class allows for displaying and switching between different skill trees based on player input. It includes an array of GameObjects called skillTrees and an integer called currentSkillTree, which is initially set to 0.

Components/Variables: 
- public GameObject[] skillTrees: An array of GameObjects representing skill trees.
- public int currentSkillTree: An integer representing the currently displayed skill tree.

Functions:
- Start(): Sets the active state of the current skill tree to true.
- SwitchSkillTree(int index): Allows for the changing of the currently displayed skill tree. If the index provided is out of range of the skillTrees array, the method returns without doing anything.

Class Name: ToolTipUiController.cs

Summary: This class manages the UI elements of the tooltip that appears when hovering over an in-game skill, updating the SkillName, SkillDescription, SkillpointCost, and SkillIcon. The UpdateUI method is called to update these elements based on the skillNode parameter passed in. The Awake method sets the cursor state and the Start method does nothing.

Components/Variables: 
- public Text SkillName: Displays the name of the skill.
- public Text SkillDescription: Displays the description of the skill.
- public Text SkillpointCost: Displays the skill point cost.
- public Image SkillIcon: Displays the icon of the skill.

Functions:
- Awake(): Sets the cursor state.
- UpdateUI(SkillNode skillNode): Updates the skill name, description, skill point cost, attribute requirement, and skill icon based on the skillNode parameter.

Class: UIManager.cs
- Manages various UI elements in the game
- Public variables for different UI game objects 
- Private variables for controlling tooltip UI and presenting quest information
- Methods for showing/hiding UI elements and pausing/unpausing game
- Uses GameManager.Instance.ChangeGameState to change game state
- Update method checks user input to open/close UI elements
- Awake method initializes Tooltip UI controller

Class: WorldSpaceCanvasController.cs
- Manages World Space Canvas object in Unity
- Contains a damageNumberPrefab GameObject to display damage numbers
- SpawnDamageNumber method creates new damage number instances
- Checks if damageNumberPrefab is assigned and creates new object if so
- Responsible for managing and displaying damage numbers on World Space Canvas

Class: IDragable.cs
- Defines interface for objects that can be dragged in Unity UI
- Includes IBeginDragHandler, IDragHandler, and IEndDragHandler methods
- Includes a custom method, getDraggedObject(), to retrieve dragged object
- Allows easy implementation of drag and drop functionality in Unity.

The "IReceiveDrop.cs" interface in the Unity project's "Ui\Interfaces" folder specifies methods that a class must implement and inherits from three other interfaces in the Unity Event System: "IPointerEnterHandler", "IPointerExitHandler", and "IDropHandler". The interface allows implementation of customizable handling of user input for drag and drop functionality.