C:\Users\Toastbrot\Downloads\STRATEGY 01.04.2022\My project\Assets\Scripts\Ui\DamageNumberController.cs
Syntax tree for DamageNumberController class:

```
DamageNumberController
├── textMeshPro: TextMeshPro
├── floatSpeed: float
├── duration: float
├── elapsedTime: float
├── playerCamera: Camera
├── Start()
│   └── playerCamera: Camera
├── SetDamageValue(damage: float)
│   └── textMeshPro: TextMeshPro
│       └── textMeshPro.text: String
├── Update()
│   ├── textMeshPro: TextMeshPro
│   │   └── textMeshPro.alpha: float
│   ├── FaceCamera()
│   │   ├── targetDirection: Vector3
│   │   │   └── playerCamera: Camera
│   │   │       ├── playerCamera.transform: Transform
│   │   │       └── transform: Transform
│   │   ├── targetDirection.y: float
│   │   ├── targetRotation: Quaternion
│   │   ├── transform.rotation: Quaternion
│   │   └── Quaternion.Slerp()
│   ├── transform.position: Vector3
│   ├── elapsedTime: float
│   └── Destroy(gameObject)
└── FaceCamera()
    ├── targetDirection: Vector3
    ├── targetDirection.y: float
    ├── targetRotation: Quaternion
    └── transform.rotation: Quaternion
```

Explanation of the internal logic of each method:

- `Start`: Initializes the `playerCamera` variable with the main camera of the scene.
- `SetDamageValue`: Sets the `textMeshPro` component's text to the `damage` value passed to the method if it is not null. Otherwise, logs an error message and returns.
- `Update`: Performs logic for each frame of the damage number's lifetime. Rotates the damage number to face the player camera if it exists, moves the damage number upwards, fades the damage number's text over time, and destroys the damage number if its lifetime has elapsed.
- `FaceCamera`: Rotates the damage number to face the player camera by calculating the direction vector from the damage number to the camera, stripping the Y component, and using `Quaternion.LookRotation` and `Quaternion.Slerp` to smoothly rotate the damage number to face the camera.