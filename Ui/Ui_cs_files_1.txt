using UnityEngine; using UnityEngine.UI; public class CharacterStatsUI : MonoBehaviour { public Text unspentStatPointsText; public Text strengthText; public Text intelligenceText; public Text dexterityText; public Text enduranceText; public Text wisdomText; public Button strengthButton; public Button intelligenceButton; public Button dexterityButton; public Button enduranceButton; public Button wisdomButton; public CharacterStats characterStats; private void Start() { strengthButton.onClick.AddListener(() => IncreaseStat(Archetype.Strength)); intelligenceButton.onClick.AddListener(() => IncreaseStat(Archetype.Intelligence)); dexterityButton.onClick.AddListener(() => IncreaseStat(Archetype.Dexterity)); enduranceButton.onClick.AddListener(() => IncreaseStat(Archetype.Endurance)); wisdomButton.onClick.AddListener(() => IncreaseStat(Archetype.Wisdom)); characterStats.StatsChanged += UpdateUI; UpdateUI(); } private void Awake() { Cursor.visible = true; Cursor.lockState = CursorLockMode.None; } private void UpdateUI() { unspentStatPointsText.text = "Unspent Points: " + characterStats.unspentStatPoints; strengthText.text = "Strength: " + characterStats.strength; intelligenceText.text = "Intelligence: " + characterStats.intelligence; dexterityText.text = "Dexterity: " + characterStats.dexterity; enduranceText.text = "Endurance: " + characterStats.endurance; wisdomText.text = "Wisdom: " + characterStats.wisdom; } private void IncreaseStat(Archetype mainStatType) { characterStats.IncreaseStat(mainStatType, 1); } }
﻿using UnityEngine; using UnityEngine.UI; public class CharacterUi : MonoBehaviour { public Text unspentStatPointsText; public Text strengthText; public Text intelligenceText; public Text dexterityText; public Text enduranceText; public Text wisdomText; public Text subStatsPhysical; public Text subStatsSpellCasting; public Text subStatsDefensive; public Text subStatsUniversal; public Button openCharacterStatsMenu; public Image unspentStatPoints; public CharacterStats characterStats; public UIManager uiManager; private void Start() { openCharacterStatsMenu.onClick.AddListener(() => uiManager.OpenCharacterStatusUI()); characterStats.StatsChanged += UpdateUI; UpdateUI(); } private void Awake() { Cursor.visible = true; Cursor.lockState = CursorLockMode.None; } private void UpdateUI() { strengthText.text = "Strength: " + characterStats.strength; intelligenceText.text = "Intelligence: " + characterStats.intelligence; dexterityText.text = "Dexterity: " + characterStats.dexterity; enduranceText.text = "Endurance: " + characterStats.endurance; wisdomText.text = "Wisdom: " + characterStats.wisdom; subStatsPhysical.text = "Critical Chance: " + characterStats.criticalChance.ToString("F1") + "%" + "\nCritical Damage: " + characterStats.criticalDamage + "%" + "\nAttack Speed: " + characterStats.attackSpeed.ToString("F2"); subStatsSpellCasting.text = "Spell Crit Chc: " + characterStats.spellCriticalChance.ToString("F1") + "%" + "\nSpell Crit Dmg: " + characterStats.spellCriticalDamage + "%" + "\nCooldown: " + characterStats.cooldown; subStatsDefensive.text = "Armor: " + characterStats.armor + "\nMagic Resi: " + characterStats.magicResistance + "\nDodge Chance: " + characterStats.dodgeChance.ToString("F1") + "%"; subStatsUniversal.text = "Max Life: " + characterStats.maxLife + "\nLife Reg: " + characterStats.lifeRegen + "\nMax Mana: " + characterStats.maxMana + "\nMana Reg: " + characterStats.manaRegen; } }
﻿using TMPro; using UnityEngine; public class DamageNumberController : MonoBehaviour { public TextMeshPro textMeshPro; public float floatSpeed = 1f; public float duration = 1.5f; private float elapsedTime = 0f; private Camera playerCamera; private void Start() { playerCamera = Camera.main; } public void SetDamageValue(float damage) { if (textMeshPro == null) { Debug.LogError("TextMeshPro component is not assigned in the DamageNumberController component."); return; } textMeshPro.text = damage.ToString(); } private void Update() { if (textMeshPro == null) { Destroy(gameObject); return; } // Rotate towards player camera if (playerCamera != null) { FaceCamera(); } // Float upwards transform.position += Vector3.up * floatSpeed * Time.deltaTime; // Update the elapsed time elapsedTime += Time.deltaTime; // Fade effect textMeshPro.alpha = Mathf.Clamp01(1f - (elapsedTime / duration)); // Destroy the damage number after the duration if (elapsedTime >= duration) { Destroy(gameObject); } } private void FaceCamera() { Vector3 targetDirection = playerCamera.transform.position - transform.position; targetDirection.y = 0; Quaternion targetRotation = Quaternion.LookRotation(-targetDirection); transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, 1); } }
using UnityEngine; public class GameManager : MonoBehaviour { public static GameManager Instance; public enum GameState { InMenu, Playing, Paused, GameOver } public GameState currentState; private void Awake() { if (Instance == null) { Instance = this; DontDestroyOnLoad(gameObject); } else { Destroy(gameObject); return; } // Initialize game state and other systems as needed currentState = GameState.InMenu; } private void Update() { HandleGameState(); UpdateCursorVisibility(); } private void UpdateCursorVisibility() { // If the game is paused or in a menu, show the cursor if (currentState == GameState.Paused || currentState == GameState.InMenu) { Cursor.visible = true; Cursor.lockState = CursorLockMode.None; } // If the game is playing, hide the cursor else if (currentState == GameState.Playing) { Cursor.visible = false; Cursor.lockState = CursorLockMode.Locked; } } private void HandleGameState() { switch (currentState) { case GameState.InMenu: // Handle main menu logic break; case GameState.Playing: // Handle playing state logic break; case GameState.Paused: // Handle paused state logic break; case GameState.GameOver: // Handle game over logic break; } } public void ChangeGameState(GameState newState) { currentState = newState; } public void SaveGame() { // Implement save game logic } public void LoadGame() { // Implement load game logic } // Implement other methods as needed, such as SaveGame, LoadGame, etc. }
﻿using UnityEngine; using UnityEngine.Rendering; [ExecuteInEditMode, ImageEffectAllowedInSceneView] public class OutlineHighlight : MonoBehaviour { public Material highlightMaterial; public Color highlightColor = Color.red; public float outlineThickness = 2f; public Transform target; private Camera cam; private CommandBuffer commandBuffer; private void Start() { cam = GetComponent<Camera>(); commandBuffer = new CommandBuffer(); } private void OnRenderImage(RenderTexture src, RenderTexture dest) { if (target == null) { Graphics.Blit(src, dest); return; } commandBuffer.Clear(); var renderTexture = RenderTexture.GetTemporary(src.width, src.height, src.depth, src.format); commandBuffer.SetRenderTarget(renderTexture); commandBuffer.ClearRenderTarget(true, true, Color.clear); var meshFilter = target.GetComponent<MeshFilter>(); if (meshFilter != null) { commandBuffer.DrawMesh(meshFilter.sharedMesh, target.localToWorldMatrix, highlightMaterial); } highlightMaterial.SetColor("_OutlineColor", highlightColor); highlightMaterial.SetFloat("_OutlineThickness", outlineThickness); Graphics.ExecuteCommandBuffer(commandBuffer); Graphics.Blit(renderTexture, dest); RenderTexture.ReleaseTemporary(renderTexture); } }
﻿using UnityEngine; public class SkillTreeMenuController : MonoBehaviour { public GameObject[] skillTrees; public int currentSkillTree = 0; public void SwitchSkillTree(int index) { if (index < 0 || index >= skillTrees.Length) return; skillTrees[currentSkillTree].SetActive(false); skillTrees[index].SetActive(true); currentSkillTree = index; } }
﻿// UIManager.cs using UnityEngine; public class UIManager : MonoBehaviour { public GameObject pauseMenu; public GameObject mainMenu; public GameObject characterStatusUI; public GameObject characterUi; public GameObject tooltipSkills; private ToolTipUiController toolTipSkillsController; private void Update() { // Check for user input to pause/unpause the game if (Input.GetKeyDown(KeyCode.Escape)) { if (GameManager.Instance.currentState == GameManager.GameState.Playing) { PauseGame(); } else if (GameManager.Instance.currentState == GameManager.GameState.Paused) { UnpauseGame(); } } // Check for user input to open/close the CharacterStatusUI if (Input.GetKeyDown(KeyCode.C)) { if (GameManager.Instance.currentState == GameManager.GameState.Playing) { OpenCharacterUi(); } else if (GameManager.Instance.currentState == GameManager.GameState.InMenu) { CloseCharacterUi(); } } } public void Awake() { toolTipSkillsController = tooltipSkills.GetComponent<ToolTipUiController>(); } public void PauseGame() { GameManager.Instance.ChangeGameState(GameManager.GameState.Paused); Time.timeScale = 0f; pauseMenu.SetActive(true); } public void UnpauseGame() { GameManager.Instance.ChangeGameState(GameManager.GameState.Playing); Time.timeScale = 1f; pauseMenu.SetActive(false); } public void ShowMainMenu() { GameManager.Instance.ChangeGameState(GameManager.GameState.InMenu); mainMenu.SetActive(true); } public void HideMainMenu() { GameManager.Instance.ChangeGameState(GameManager.GameState.Playing); mainMenu.SetActive(false); } public void OpenCharacterStatusUI() { GameManager.Instance.ChangeGameState(GameManager.GameState.InMenu); characterStatusUI.SetActive(true); } public void OpenCharacterUi() { GameManager.Instance.ChangeGameState(GameManager.GameState.InMenu); characterUi.SetActive(true); } public void CloseCharacterUi() { GameManager.Instance.ChangeGameState(GameManager.GameState.Playing); characterUi.SetActive(false); } public void CloseCharacterStatusUI() { characterStatusUI.SetActive(false); } public void OpenToolTipSkill(SkillNode node, Vector3 Positon) { tooltipSkills.gameObject.SetActive(true); tooltipSkills.gameObject.GetComponent<RectTransform>().position = Positon; toolTipSkillsController.UpdateUI(node); } public void CloseToolTipSkill() { tooltipSkills.gameObject.SetActive(false); } }
﻿using UnityEngine; public class WorldSpaceCanvasController : MonoBehaviour { public static WorldSpaceCanvasController Instance; public GameObject damageNumberPrefab; private void Awake() { if (Instance == null) { Instance = this; } else { Destroy(gameObject); } } public void SpawnDamageNumber(float damage, Vector3 position) { if (damageNumberPrefab == null) { Debug.LogError("DamageNumberPrefab is not assigned in the WorldSpaceCanvasController component."); return; } GameObject damageNumberInstance = Instantiate(damageNumberPrefab, position, Quaternion.identity, transform); damageNumberInstance.gameObject.SetActive(true); DamageNumberController damageNumberController = damageNumberInstance.GetComponent<DamageNumberController>(); if (damageNumberController != null) { damageNumberController.SetDamageValue(damage); } else { Debug.LogError("DamageNumberController component is missing on the DamageNumberPrefab."); Destroy(damageNumberInstance); } } }
